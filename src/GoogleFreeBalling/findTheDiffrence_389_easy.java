package GoogleFreeBalling;

import java.util.HashMap;
import java.util.Set;

public class findTheDiffrence_389_easy {
//sink with js 
//	var findTheDifference = function(s, t) {
//	    let m = new Map();
//	    s.split("").forEach(x => {
//	        if (!m.has(x)) m.set(x, 1);
//	        else m.set(x, m.get(x)+1);
//	    });
//	    for (let y of t) {
//	        if (!m.has(y)) return y; // if added letter is not part of s
//	        else m.set(y, m.get(y)-1);
//	        
//	        if (m.get(y) < 0) return y; // if added letter is part of s
//	    }
//	};
	
	//Sink Method
	public class Solution {
	    public char findTheDifference2(String s, String t) {
	        // Initialize variables to store sum of ASCII codes for 
	        // each string
	        int charCodeS = 0, charCodeT = 0;
	        // Iterate through both strings and char codes
	        for (int i = 0; i < s.length(); ++i) charCodeS += (int)s.charAt(i);
	        for (int i = 0; i < t.length(); ++i) charCodeT += (int)t.charAt(i);
	        // Return the difference between 2 strings as char
	        return (char)(charCodeT - charCodeS);
	    }
	}

//	UPDATE:
//	Thanks to @zzhai for providing this optimization! :) 
//	"1 optimization: As t.length() is just 1 character longer than s.length(), we can use 1 pass to process both strings (20% better runtime performance)."
	public char findTheDifferencebest(String s, String t) {
	        int charCode = t.charAt(s.length());
	        // Iterate through both strings and char codes
	        for (int i = 0; i < s.length(); ++i) {
	              charCode -= (int)s.charAt(i);
	              charCode += (int)t.charAt(i); 
	        }
	        return (char)charCode;
	    }
	
	
	
	
	//intuition 1 - hashmap and interate as we go, it will be liniar time O(n) or less
	//intuition 2 - alphabet store int map  arr[charAt(i)-'a'] = 1; if(chatAt(i)-'a')exists, then skip it
	// if it doesn't then it's our number in the 2nd iter
	
//	//bc a duplicate could be added we are using the value to compare the digits
//	// the key is the index which we don't need to get, its a good key
//	//bc a key index is uniqie we wont need to worry about dups since we are tracking the index
//	
//	Hi, guys.
//	It's more slower than other cool solutions, anyway It's still worth consideration.
//
//	For example,
//	s = "asdff"
//	t = "sfasdf" // one more 's'
//
//	Store characters in s string to Map using for loop.
//	Key is the character and Value is number of the character.
//	(after this loop, we got the map (a->1), (s->1), (d->1), (f->2).)
//
//	Iterate t string. In this time, Let's 'subtract' value of the map using character of t string.
//	If value will be lower than zero or there's no key, it means that's the element we have to find.
//	In example case,
//	i=0, key:s, value:1 ->0
//	i=1, key:f, value:2 -> 1
//	i=2, key:a, value:1 -> 0
//	i=3, key:s, value:0 -> -1 detect & return 's'.
//
//	Here's my code and Happy coding y'all:)

	public static char findTheDifference2(String s, String t) {
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		
		for (int i = 0; i < s.length(); i++) {
			map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
			System.out.println(s.charAt(i));
			System.out.println(map.getOrDefault(s.charAt(i), 0));
		}

		for (int i = 0; i < t.length(); i++) {
			
			int value = map.getOrDefault(t.charAt(i), 0) -1;
			if(value < 0) return t.charAt(i);
			map.put(t.charAt(i), value);
		}

		//error case
		return '-';
	}
	
	//bad solution doesn't work for duplicates
    public static char findTheDifference(String s, String t) {

    HashMap<Integer, Character> map = new HashMap<Integer, Character>();
    HashMap<Integer, Character> map2 = new HashMap<Integer, Character>();
    s = s + ' ';
    //we want it all in one loop , so we know we will eventually be at + 1 after t
		for(int i =0;i<s.length();i++) {
			map.put(i, s.charAt(i));//map s first
			map2.put(i, t.charAt(i));//map s first
		}
		Set<Integer> keySet = map.keySet();
		char missing = ' ';
		for(int c : keySet) {
			if(!map.containsValue(map2.get(c))) {//check all the values of s existing
				missing = map2.get(c);//map1, doesn't have the value map 2 has
			}
		}			
		//

		return missing;
	}
    
	public static void main(String[] args) {
		System.out.print(findTheDifference2("aee","aeae"));
	}
}
//Given two strings s and t which consist of only lowercase letters.
//
//String t is generated by random shuffling string s and then add 
//one more letter at a random position.
//
//Find the letter that was added in t.
//
//Example:
//
//Input:
//s = "abcd"
//t = "abcde"
//
//Output:
//e
//
//Explanation:
//'e' is the letter that was added.